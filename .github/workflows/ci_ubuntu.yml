name: CI Ubuntu

on:
  push:
      branches:
        - 'features/mingw-ci'
  pull_request:

  workflow_dispatch:


env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: RELWITHDEBINFO

jobs:
  CI:
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Ubuntu Latest GCC",
            os: ubuntu-latest,
            cc: "gcc", cxx: "g++"
          }
        - {
            name: "Ubuntu Latest Clang",
            os: ubuntu-latest,
            cc: "clang", cxx: "clang++"
          }
    name: ${ { matrix.config.name } }
    runs-on: ${ { matrix.config.os } }
    defaults:
      run:
        shell: bash 

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Update apt (Ubuntu)
        env:
          DEBIAN_FRONTEND: noninteractive
        run: sudo -E apt-get update -qq -o Acquire::Retries=3

      - name: Add libheif PPA (Ubuntu)
        run: |
          sudo add-apt-repository ppa:strukturag/libde265
          sudo add-apt-repository ppa:strukturag/libheif

      - name: install Ubuntu dependencies
        env:
          DEBIAN_FRONTEND: noninteractive
        run:  sudo -E apt-get install --fix-missing -qq -o Acquire::Retries=3
              libjpeg-turbo8-dev libimagequant-dev libde265-dev
              libpng-dev libwebp-dev libtiff5-dev libx265-dev 
              libheif-dev libfreetype-dev libheif-dev 
              libavifile-0.7-dev libxpm-dev libraqm-dev

      - name: Configure CMake
        env:
          CC: ${{ matrix.config.cc }}
          CXX: ${{ matrix.config.cxx }})
        run:
          cmake -DENABLE_PNG=1 -DENABLE_FREETYPE=1 -DENABLE_JPEG=1 -DENABLE_WEBP=1
          -DENABLE_TIFF=1 -DENABLE_XPM=1 -DENABLE_GD_FORMATS=1 -DENABLE_HEIF=1 -DENABLE_RAQM=1
          -DBUILD_TEST=1 -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

      - name: Build
        env:
          CC: ${{ matrix.cc }}
          CXX: ${{ matrix.cxx }})
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --parallel 4

      - name: Test Ubuntu
        working-directory: ${{github.workspace}}/build
        run: |
          export TMP=${{runner.temp}}
          echo "TMP=${{github.temp}}" >> $GITHUB_ENV
          echo "LSAN_OPTIONS=suppressions=${{ github.workspace }}/suppressions/lsan.supp" >> $GITHUB_ENV
          CTEST_OUTPUT_ON_FAILURE=1 ctest -C ${{env.BUILD_TYPE}}

      - name: Configure CMake ASAN Ubuntu
        env:
          CC: ${{ matrix.config.cc }}
          CXX: ${{ matrix.config.cxx }})
        run:
          cmake -DENABLE_PNG=1 -DENABLE_FREETYPE=1 -DENABLE_JPEG=1 -DENABLE_WEBP=1
              -DENABLE_TIFF=1 -DENABLE_XPM=1 -DENABLE_GD_FORMATS=1 -DENABLE_HEIF=1
              -DBUILD_TEST=1 -B ${{github.workspace}}/buildasan -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

      - name: Build ASAN Ubuntu
        env:
          CC: ${{ matrix.config.cc }}
          CXX: ${{ matrix.config.cxx }})
        run: cmake --build ${{github.workspace}}/buildasan --config ${{env.BUILD_TYPE}}

      - name: Test ASAN Ubuntu
        working-directory: ${{github.workspace}}/buildasan
        # Execute tests defined by the CMake configuration.  
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: |
          export TMP=${{runner.temp}}
          echo "TMP=${{github.temp}}" >> $GITHUB_ENV
          CTEST_OUTPUT_ON_FAILURE=1 ctest -C ${{env.BUILD_TYPE}}

      - name: Output Log
        if: contains(matrix.os, 'ubuntu')
        run: |
          if test -f "/home/runner/work/libgd/libgd/build/Testing/Temporary/LastTest.log"; then
              cat /home/runner/work/libgd/libgd/build/Testing/Temporary/LastTest.log
          fi
