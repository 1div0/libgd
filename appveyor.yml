shallow_clone: true



environment:
  # settings
  with_zlib: 1      # libgd actually won't build without it..
  with_libpng: 1    # needs zlib; removing will break current tests
  with_libjpeg: 1   # will download nasm; removing will break current tests
  with_freetype: 1  # removing breaks bindings freetype test
  with_iconv: 0     
  with_tiff: 1      # needs zlib and jpeg
  
  
  matrix:
    - build_platform: "x86"
      build_compiler: "msvc"
    
    - build_platform: "x64"
      build_compiler: "msvc"
    
    - build_platform: "x86"
      build_compiler: "mingw"
      build_bindings: 1
    
    - build_platform: "x64"
      build_compiler: "mingw"
      build_bindings: 1



install:
  - ps: if($env:build_platform -eq 'x64') {
          $env:vcvar_arg = 'x86_amd64';
          $env:vc_cm_arg = 'Visual Studio 12 Win64';
          $env:mingw_extra = '-DCMAKE_C_FLAGS=-m64 -DCMAKE_CXX_FLAGS=-m64';
        }
        else {
          $env:vcvar_arg = 'x86';
          $env:vc_cm_arg = 'Visual Studio 12';
          $env:mingw_extra = '';
        }
  
  # get common functions
  - git clone https://github.com/imazen/gd-appveyor-helpers
  - ps: . .\gd-appveyor-helpers\appveyor_funcs.ps1
  
  
  # fetch deps
  - mkdir deps
  - ps: if($env:build_bindings -eq 1) { invoke 'git' 'clone https://github.com/imazen/gd-dotnet-bindings-generator.git --depth 1 --branch itanium --single-branch' }
  - ps: if($env:with_zlib -eq 1) {
          invoke 'nuget' "install zlib-$($env:build_compiler)-$($env:build_platform) -Source https://ci.appveyor.com/nuget/zlib-94hmpf3q011d";
          move zlib*\* deps -force }
  - ps: if($env:with_libjpeg -eq 1) {
          invoke 'nuget' "install libjpeg-$($env:build_compiler)-$($env:build_platform) -Source https://ci.appveyor.com/nuget/libjpeg-turbo-t70qw53csfhj";
          move libjpeg*\* deps -force }
  - ps: if($env:with_libpng -eq 1) {
          invoke 'nuget' "install libpng-$($env:build_compiler)-$($env:build_platform) -Source https://ci.appveyor.com/nuget/libpng-i3b6v9aught8";
          move libpng*\* deps -force }
  - ps: if($env:with_freetype -eq 1) {
          invoke 'nuget' "install freetype-$($env:build_compiler)-$($env:build_platform) -Source https://ci.appveyor.com/nuget/freetype-vf7bw7v5ec29";
          move freetype*\* deps -force }
  - ps: if($env:with_iconv -eq 1) {
          invoke 'nuget' "install libiconv-$($env:build_compiler)-$($env:build_platform) -Source https://ci.appveyor.com/nuget/libiconv-es1y8p1h9c47";
          move libiconv*\* deps -force }
  - ps: if($env:with_tiff -eq 1) {
          invoke 'nuget' "install libtiff-$($env:build_compiler)-$($env:build_platform) -Source https://ci.appveyor.com/nuget/libtiff-i3h8tqqy7o7b";
          move libtiff*\* deps -force }
  
  
  # make static names cmake friendly
  - if [%build_compiler%]==[msvc] (
      copy /y deps\zlibstatic.lib deps\zlib.lib &&
      copy /y deps\libpng15_static.lib deps\libpng.lib &&
      copy /y deps\jpeg-static.lib deps\jpeg.lib )
  - if [%build_compiler%]==[mingw] (
      copy /y deps\libzlibstatic.a deps\libz.a &&
      del deps\libpng.dll* &&
      del deps\libjpeg.dll* &&
      del deps\libtiff.dll* &&
      del deps\libiconv.dll* )
  
  
  # get mingw-w64 (C:\mingw64)
  - ps: if($env:build_compiler -eq 'mingw' -and $env:build_platform -eq 'x64') {
      invoke 'curl' '-L -o mw64.7z "http://libgd.blob.core.windows.net/mingw/x86_64-4.9.1-release-posix-seh-rt_v3-rev1.7z"';
      invoke '7z' 'x -oC:\ mw64.7z'; }
  
  # get mingw-w64-32bit (C:\mingw32)
  - ps: if($env:build_compiler -eq 'mingw' -and $env:build_platform -eq 'x86' -and $env:build_bindings -eq 1) {
      invoke 'curl' '-L -o mw64-32.7z "http://libgd.blob.core.windows.net/mingw/i686-4.9.1-release-posix-dwarf-rt_v3-rev1.7z"';
      invoke '7z' 'x -oC:\ mw64-32.7z'; }
  
  # sh is breaking mingw builds; remove
  - for %%i in (sh.exe) do @del "%%~$PATH:i"




build_script:
  
  # set env
  
  - '"C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\vcvarsall" %vcvar_arg%'
  - if [%build_compiler%]==[mingw] if [%build_platform%]==[x86] SET PATH=C:\MinGW\bin;%PATH%
  - if [%build_compiler%]==[mingw] if [%build_platform%]==[x64] SET PATH=C:\mingw64\bin;%PATH%
  
  
  # build msvc
  
  - if [%build_compiler%]==[msvc] (
      cmake
        -G "%vc_cm_arg%"
        -DCMAKE_C_FLAGS="/Qvec-report:1"
        -DCMAKE_CXX_FLAGS="/Qvec-report:1"
        -DCMAKE_LIBRARY_PATH=deps
        -DCMAKE_INCLUDE_PATH=deps;deps\freetype
        -DBUILD_TEST=1
        -DENABLE_PNG=%with_libpng%
        -DENABLE_JPEG=%with_libjpeg%
        -DENABLE_FREETYPE=%with_freetype%
        -DENABLE_ICONV=%with_iconv%
        -DENABLE_TIFF=%with_tiff%
        -Wno-dev
        . &&
      msbuild gd.sln /p:Configuration=Release /v:m )
  
  - ps: if($env:build_compiler -eq 'msvc') {
      invoke '7z' "a libgd-msvc12-$($env:build_platform).zip .\Bin\Release\libgd.dll .\Bin\Release\libgd.lib .\Bin\Release\libgd-static.lib";
      Push-AppveyorArtifact "libgd-msvc12-$($env:build_platform).zip"; }
  
  
  
  # build mingw
  
  - if [%build_compiler%]==[mingw] (
      cmake
        -G "MinGW Makefiles"
        %mingw_extra%
        -DCMAKE_SHARED_LINKER_FLAGS=-static
        -DCMAKE_LIBRARY_PATH=deps
        -DCMAKE_INCLUDE_PATH=deps;deps\freetype
        -DBUILD_TEST=1
        -DENABLE_PNG=%with_libpng%
        -DENABLE_JPEG=%with_libjpeg%
        -DENABLE_FREETYPE=%with_freetype%
        -DENABLE_ICONV=%with_iconv%
        -DENABLE_TIFF=%with_tiff%
        -Wno-dev
        . &&
      mingw32-make )
  
  - ps: if($env:build_compiler -eq 'mingw') {
      invoke '7z' "a libgd-mingw-$($env:build_platform).zip .\Bin\liblibgd.dll .\Bin\liblibgd.dll.a .\Bin\liblibgd-static.a";
      Push-AppveyorArtifact "libgd-mingw-$($env:build_platform).zip"; }
  
  
  
  # build bindings
  
  - '"C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\vcvarsall"'
  - if [%build_bindings%]==[1] if [%build_compiler%]==[mingw] (
      cd gd-dotnet-bindings-generator &&
      msbuild LibGD.CLI\LibGD.CLI.csproj /p:Configuration=Debug /p:Platform=AnyCPU /v:m &&
      copy ..\Bin\liblibgd.dll LibGD.CLI\bin\Debug\liblibgd.dll &&
      cd LibGD.CLI\bin\Debug &&
      (if [%build_platform%]==[x86] (LibGD.CLI.exe %APPVEYOR_BUILD_FOLDER%\src C:\mingw32\bin\mingw32-make.exe liblibgd.dll)
      else if [%build_platform%]==[x64] (LibGD.CLI.exe %APPVEYOR_BUILD_FOLDER%\src C:\mingw64\bin\mingw32-make.exe liblibgd.dll)) &&
      cd ..\..\.. &&
      msbuild LibGD.Tests\LibGD.Tests.csproj /p:Configuration=Debug /p:Platform=AnyCPU /v:m &&
      cd..)
  
  - ps: if($env:build_bindings -eq 1 -and $env:build_compiler -eq 'mingw') {
      invoke '7z' "a LibGDSharp-$($env:build_platform).zip .\gd-dotnet-bindings-generator\LibGD.CLI\bin\Debug\liblibgd.dll .\gd-dotnet-bindings-generator\LibGD.CLI\bin\Debug\LibGDSharp.dll";
      Push-AppveyorArtifact "LibGDSharp-$($env:build_platform).zip"; }




test_script:
  - SET fail=0
  - ctest -C Release || SET fail=1 & ver > nul
  - ps: Push-Ctest-Results '.'
  - ps: Push-AppveyorArtifact Testing\Temporary\LastTest.log
  - exit %fail%
  
  - if [%build_bindings%]==[1] if [%build_compiler%]==[mingw] (
      copy gd-dotnet-bindings-generator\LibGD.CLI\bin\Debug\liblibgd.dll gd-dotnet-bindings-generator\LibGD.Tests\bin\Debug\liblibgd.dll &&
      (if [%build_platform%]==[x86] (nunit-console-x86 gd-dotnet-bindings-generator\LibGD.Tests\bin\Debug\LibGD.Tests.dll)
      else if [%build_platform%]==[x64] (nunit-console gd-dotnet-bindings-generator\LibGD.Tests\bin\Debug\LibGD.Tests.dll)) &&
      appveyor PushArtifact TestResult.xml )